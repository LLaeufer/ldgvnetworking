-- Example of Gradual Label-Dependent Lambda Calculus
-- Example of typed map, see section 2.2
-- (Label-Dependent Lambda Calculus and Gradual Typing, 2021)

type Bool : ~un = {'True, 'False}

type A : ~unit = Unit
type B : ~unit = Unit
type ListA : ~un = Int
type ListB : ~un = Double
type ArrayA : ~un = String
type ArrayB : ~un = Unit

val arraymap : (f : (x:A) -> B) -> ((xs:ArrayA) -> ArrayB)
val listmap : (f : (x:A) -> B) -> (xs:ListA) -> ListB
val arraytolist : (xs:ArrayB) -> ListB
val arrayoflist : (xs:ListB) -> ArrayB

val mymap = fn (b : Bool) fn (f : (z:A) -> B) fn (x : *)
    case b {'True: arraymap f x, 'False: listmap f x}

val typedmap = fn (b : Bool) fn (f : (z:A) -> B) fn (x : case b {'True: ArrayA, 'False: ListA})
    case b {'True: arraymap f x, 'False: listmap f x}

val dynmap = fn (b : *) fn (f : (z:A) -> B) fn (x : case b {'True: ArrayA, 'False: ListA})
    case b {'True: arraymap f x, 'False: listmap f x}

val dyn2map = fn (b : *) fn (f : *) fn (x : case b {'True: ArrayA, 'False: ListA})
    case b {'True: arraymap f x, 'False: listmap f x}

val dyn3map = fn (b : *) fn (f : *) fn (x : *)
    case b {'True: arraymap f x, 'False: listmap f x}

val mymap2 = fn (b : Bool) fn (f : (z:A) -> B) fn (x : *)
    case b {'True: arraytolist (arraymap f x), 'False: arrayoflist (listmap f x)}

val typedmap2 = fn (b : Bool) fn (f : (z:A) -> B) fn (x : case b {'True: ArrayA, 'False: ListA})
    case b {'True: arraytolist (arraymap f x), 'False: arrayoflist (listmap f x)}

val checkedmap2 :
  (b : Bool) ->
		(f : (z:A) -> B) ->
      (x : case b {'True: ArrayA, 'False: ListA}) ->
        (case b {'True: ListA, 'False: ArrayA})
val checkedmap2 =
  fn (b : Bool)
    fn (f : (z:A) -> B)
      fn (x : case b {'True: ArrayA, 'False: ListA})
        case b {'True: arraytolist (arraymap f x), 'False: arrayoflist (listmap f x)}
