
-- Examples from section 2 of the paper "Label Dependent Lambda Calculus and Gradual Typing.pdf" (2021)
-- Also used in unit tests in tests/UtilsFuncCcldlc.hs

type Bool : ~un = {'T, 'F}

val not : (b: Bool) -> Bool
val not   (b: Bool) = (case b {'T: 'F, 'F: 'T})


-- This is the second GLDLC function:
-- f2 :: Π(x: *).Π(y: case x {'T: Int, 'F: Bool}).case x {'T: Int, 'F: Bool}

-- This is from the internal CCLDLC representation:
val f2' :  (x: *) -> (y: case (x: * => Bool) {'T: Int, 'F: Bool}) -> case (x: * => Bool) {'T: Int, 'F: Bool}
val f2' = 𝜆(x: *)
          𝜆(y: case (x: * => Bool) {'T: Int, 'F: Bool})
	       case (x: * => Bool) {'T: 17+y, 'F: not y}

