type Bool : ~un = {'T, 'F}
val not(b: Bool) = case b of {'T: 'F, 'F: 'T}


-- ok
-- val f  :  (x: Bool) -> (y: case x {'T: Int, 'F: Bool}) -> case x {'T: Int,  'F: Bool}
val f  = 𝜆(x: Bool) 𝜆(y: case x {'T: Int, 'F: Bool}) case x {'T: 17+y, 'F: not y}

-- fails
val g  = 𝜆(x: Bool) 𝜆(y: case x {'T: Int, 'F: Bool}) not y

